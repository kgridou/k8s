name: Deploy with Minikube

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  minikube-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: ./mvnw clean package -DskipTests
      
    - name: Start minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: 1.28.0
        
    - name: Build Docker image in minikube
      run: |
        eval $(minikube docker-env)
        docker build -t demo-app:${{ github.sha }} .
        docker tag demo-app:${{ github.sha }} demo-app:latest
        
    - name: Deploy to Kubernetes
      run: |
        # Update image tag in deployment
        sed -i 's/demo-app:1.0.0/demo-app:latest/g' k8s/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/demo-app -n demo-app
        
    - name: Test deployment
      run: |
        # Port forward to test the application
        kubectl port-forward service/demo-app-service 8080:80 -n demo-app &
        sleep 10
        
        # Test endpoints
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/actuator/health || exit 1
        
        echo "All endpoints are working!"
        
    - name: Show deployment status
      run: |
        kubectl get all -n demo-app
        kubectl logs deployment/demo-app -n demo-app --tail=50
        
    - name: Cleanup
      if: always()
      run: |
        kubectl delete namespace demo-app --ignore-not-found=true
        minikube stop